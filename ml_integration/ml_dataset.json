[
  {
    "code": "def twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
    "language": "python",
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "algorithm_type": "hash_table",
    "patterns": [
      "single_loop",
      "hash_lookup"
    ],
    "confidence": 0.95,
    "source": "leetcode",
    "features": {
      "code_length": 216,
      "line_count": 7,
      "function_count": 1,
      "loop_count": 1,
      "recursion_count": 0,
      "data_structure_count": 2,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 1,
        "logarithmic": 0,
        "exponential": 4
      },
      "ast_depth": 8,
      "ast_node_count": 60
    }
  },
  {
    "code": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "language": "python",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [
      "while_loop",
      "midpoint_calculation"
    ],
    "confidence": 0.95,
    "source": "leetcode",
    "features": {
      "code_length": 290,
      "line_count": 10,
      "function_count": 1,
      "loop_count": 1,
      "recursion_count": 0,
      "data_structure_count": 0,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 0,
        "logarithmic": 1,
        "exponential": 6
      },
      "ast_depth": 8,
      "ast_node_count": 87
    }
  },
  {
    "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr",
    "language": "python",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "sorting",
    "patterns": [
      "nested_loops",
      "swapping"
    ],
    "confidence": 0.95,
    "source": "leetcode",
    "features": {
      "code_length": 206,
      "line_count": 6,
      "function_count": 1,
      "loop_count": 2,
      "recursion_count": 0,
      "data_structure_count": 0,
      "complexity_keywords": {
        "linear": 2,
        "quadratic": 4,
        "logarithmic": 0,
        "exponential": 4
      },
      "ast_depth": 10,
      "ast_node_count": 92
    }
  },
  {
    "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
    "language": "python",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "recursion",
    "patterns": [
      "recursive_call",
      "base_case"
    ],
    "confidence": 0.95,
    "source": "leetcode",
    "features": {
      "code_length": 92,
      "line_count": 3,
      "function_count": 1,
      "loop_count": 0,
      "recursion_count": 0,
      "data_structure_count": 0,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 0,
        "logarithmic": 0,
        "exponential": 6
      },
      "ast_depth": 7,
      "ast_node_count": 32
    }
  },
  {
    "code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result",
    "language": "python",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "divide_conquer",
    "patterns": [
      "recursive_call",
      "merging",
      "divide"
    ],
    "confidence": 0.95,
    "source": "leetcode",
    "features": {
      "code_length": 531,
      "line_count": 24,
      "function_count": 2,
      "loop_count": 1,
      "recursion_count": 0,
      "data_structure_count": 1,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 0,
        "logarithmic": 1,
        "exponential": 39
      },
      "ast_depth": 8,
      "ast_node_count": 175
    }
  },
  {
    "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    return quick_sort(left) + middle + quick_sort(right)",
    "language": "python",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(log n)",
    "algorithm_type": "sorting",
    "patterns": [
      "recursive_call",
      "pivot_selection",
      "partitioning"
    ],
    "confidence": 0.95,
    "source": "github",
    "features": {
      "code_length": 286,
      "line_count": 9,
      "function_count": 1,
      "loop_count": 3,
      "recursion_count": 0,
      "data_structure_count": 0,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 9,
        "logarithmic": 1,
        "exponential": 10
      },
      "ast_depth": 7,
      "ast_node_count": 99
    }
  },
  {
    "code": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    \n    visited.add(start)\n    print(start)\n    \n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)",
    "language": "python",
    "time_complexity": "O(V + E)",
    "space_complexity": "O(V)",
    "algorithm_type": "graph_traversal",
    "patterns": [
      "recursive_call",
      "visited_set",
      "graph_iteration"
    ],
    "confidence": 0.95,
    "source": "github",
    "features": {
      "code_length": 246,
      "line_count": 9,
      "function_count": 1,
      "loop_count": 1,
      "recursion_count": 0,
      "data_structure_count": 1,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 1,
        "logarithmic": 0,
        "exponential": 0
      },
      "ast_depth": 7,
      "ast_node_count": 59
    }
  },
  {
    "code": "import heapq\n\ndef dijkstra(graph, start):\n    distances = {node: float('infinity') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_distance, current_node = heapq.heappop(pq)\n        \n        if current_distance > distances[current_node]:\n            continue\n            \n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n            \n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    \n    return distances",
    "language": "python",
    "time_complexity": "O((V + E) log V)",
    "space_complexity": "O(V)",
    "algorithm_type": "shortest_path",
    "patterns": [
      "priority_queue",
      "graph_iteration",
      "heap_operations"
    ],
    "confidence": 0.95,
    "source": "textbook",
    "features": {
      "code_length": 624,
      "line_count": 20,
      "function_count": 1,
      "loop_count": 3,
      "recursion_count": 0,
      "data_structure_count": 5,
      "complexity_keywords": {
        "linear": 0,
        "quadratic": 4,
        "logarithmic": 0,
        "exponential": 7
      },
      "ast_depth": 9,
      "ast_node_count": 131
    }
  },
  {
    "code": "def fibonacci_dp(n):\n    if n <= 1:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]",
    "language": "python",
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "algorithm_type": "dynamic_programming",
    "patterns": [
      "single_loop",
      "memoization",
      "array_access"
    ],
    "confidence": 0.95,
    "source": "textbook",
    "features": {
      "code_length": 185,
      "line_count": 10,
      "function_count": 1,
      "loop_count": 1,
      "recursion_count": 0,
      "data_structure_count": 0,
      "complexity_keywords": {
        "linear": 1,
        "quadratic": 1,
        "logarithmic": 0,
        "exponential": 6
      },
      "ast_depth": 8,
      "ast_node_count": 79
    }
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int dp3(int n){ std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+i*k*j); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D{ int mco(int[] p){ int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int triple2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s+=i+j+k; } } } return s; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T2{ int tri2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s++; } } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm3(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ int t=a[l]; a[l]=a[i]; a[i]=t; perm3(a,l+1); a[i]=a[l]; a[l]=t; } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P3{ void p3(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p3(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int dp3(int n){ std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+i*k*j); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D{ int mco(int[] p){ int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int triple2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s+=i+j+k; } } } return s; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T2{ int tri2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s++; } } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm3(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ int t=a[l]; a[l]=a[i]; a[i]=t; perm3(a,l+1); a[i]=a[l]; a[l]=t; } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P3{ void p3(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p3(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco2(std::vector<int>& p){int n=p.size(); std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=INT_MAX; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D2{ int mco2(int[] p){int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm4(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();++i){ std::swap(a[l],a[i]); perm4(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P4{ void p4(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p4(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int lb(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B3{ int lb(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int dp3(int n){ std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+i*k*j); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D{ int mco(int[] p){ int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int triple2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s+=i+j+k; } } } return s; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T2{ int tri2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s++; } } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm3(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ int t=a[l]; a[l]=a[i]; a[i]=t; perm3(a,l+1); a[i]=a[l]; a[l]=t; } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P3{ void p3(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p3(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco2(std::vector<int>& p){int n=p.size(); std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=INT_MAX; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D2{ int mco2(int[] p){int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm4(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();++i){ std::swap(a[l],a[i]); perm4(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P4{ void p4(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p4(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int lb(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B3{ int lb(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int scan(std::vector<int>& a,int x){int i=0; while(i<(int)a.size()){ if(a[i]==x) return i; i++; } return -1;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN1{ int scan(int[] a,int x){int i=0; while(i<a.length){ if(a[i]==x) return i; i++; } return -1; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int twop(std::vector<int>& a){int i=0,j=(int)a.size()-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN2{ int twop(int[] a){int i=0,j=a.length-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long pairs(std::vector<int>& a){ long c=0; int n=a.size(); for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN3{ long pairs(int[] a){ long c=0; int n=a.length; for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=i+j+k; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN4{ long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long factLike(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN5{ long f(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int dp3(int n){ std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+i*k*j); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D{ int mco(int[] p){ int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int triple2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s+=i+j+k; } } } return s; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T2{ int tri2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s++; } } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm3(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ int t=a[l]; a[l]=a[i]; a[i]=t; perm3(a,l+1); a[i]=a[l]; a[l]=t; } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P3{ void p3(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p3(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco2(std::vector<int>& p){int n=p.size(); std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=INT_MAX; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D2{ int mco2(int[] p){int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm4(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();++i){ std::swap(a[l],a[i]); perm4(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P4{ void p4(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p4(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int lb(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B3{ int lb(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int scan(std::vector<int>& a,int x){int i=0; while(i<(int)a.size()){ if(a[i]==x) return i; i++; } return -1;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN1{ int scan(int[] a,int x){int i=0; while(i<a.length){ if(a[i]==x) return i; i++; } return -1; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int twop(std::vector<int>& a){int i=0,j=(int)a.size()-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN2{ int twop(int[] a){int i=0,j=a.length-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long pairs(std::vector<int>& a){ long c=0; int n=a.size(); for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN3{ long pairs(int[] a){ long c=0; int n=a.length; for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=i+j+k; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN4{ long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long factLike(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN5{ long f(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int ub(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=(l+r)/2; if(a[m]<=x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int idx(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1; while(l<=r){ int m=(l+r)>>1; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1; } return -1; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B4{ int ub(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=(l+r)>>>1; if(a[m]<=x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B5{ int idx(int[] a,int x){int l=0,r=a.length-1; while(l<=r){ int m=(l+r)>>>1; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1; } return -1; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ1{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ swap(a,l,i); p(a,l+1); swap(a,l,i);} } void swap(int[] a,int i,int j){ int t=a[i]; a[i]=a[j]; a[j]=t; } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ2{ void p(int[] a){ perm(a,0);} void perm(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; perm(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ3{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ if(i!=l){ int t=a[l];a[l]=a[i];a[i]=t; } p(a,l+1); if(i!=l){ int t=a[l];a[l]=a[i];a[i]=t; } } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int getFirst(const std::vector<int>& a){ return a[0]; }",
    "language": "cpp",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs(std::vector<int>& a,int x){int l=0,r=a.size()-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x) return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int sum(std::vector<int>& a){int s=0; for(int x: a) s+=x; return s;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void sortv(std::vector<int>& a){ std::sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bubble(int* a,int n){ for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco(int p[], int n){ int m[n][n]; for(int i=1;i<n;i++) m[i][i]=0; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<=j-1;k++){ int q=m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]; if(q<m[i][j]) m[i][j]=q; } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt=0; void gen(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt++;return;} gen(a,i+1); gen(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::swap(a[l],a[i]); perm(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int[] a){return a[0];}}",
    "language": "java",
    "time_complexity": "O(1)",
    "space_complexity": "O(1)",
    "algorithm_type": "constant",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int bs(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int mid=l+(r-l)/2; if(a[mid]==x)return mid; if(a[mid]<x) l=mid+1; else r=mid-1;}return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int sum(int[] a){int s=0; for(int x: a) s+=x; return s;}}",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{void s(int[] a){ Arrays.sort(a); }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{void b(int[] a){int n=a.length; for(int i=0;i<n-1;i++){ for(int j=0;j<n-i-1;j++){ if(a[j]>a[j+1]){int t=a[j];a[j]=a[j+1];a[j+1]=t;} } } }}",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int f(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s;}}",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(std::vector<int>& a,int l,int m,int r){int n1=m-l+1,n2=r-m; std::vector<int> L(n1),R(n2); for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++];}\nvoid ms(std::vector<int>& a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void merge(int a[],int l,int m,int r){ int n1=m-l+1,n2=r-m; int L[n1],R[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\nvoid ms(int a[],int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void merge(int[] a,int l,int m,int r){ int n1=m-l+1,n2=r-m; int[] L=new int[n1],R=new int[n2]; for(int i=0;i<n1;i++)L[i]=a[l+i]; for(int j=0;j<n2;j++)R[j]=a[m+1+j]; int i=0,j=0,k=l; while(i<n1 && j<n2) a[k++]=(L[i]<=R[j]?L[i++]:R[j++]); while(i<n1)a[k++]=L[i++]; while(j<n2)a[k++]=R[j++]; }\n void ms(int[] a,int l,int r){ if(l<r){ int m=l+(r-l)/2; ms(a,l,m); ms(a,m+1,r); merge(a,l,m,r);} }}",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "merge_sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ std::iter_swap(a.begin()+l,a.begin()+i); perm(a,l+1); std::iter_swap(a.begin()+l,a.begin()+i);} }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class C{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class C{ void f(int[] a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(int i=0;i<a.length;i++){ t.put(a[i], t.getOrDefault(a[i],0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs2(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{int bs2(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)/2; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}}",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void bub2(std::vector<int>& a){int n=a.size(); for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]) std::swap(a[j],a[j-1]); } } }",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B{ void b2(int[] a){int n=a.length; for(int i=0;i<n;i++){ for(int j=1;j<n-i;j++){ if(a[j]<a[j-1]){ int t=a[j]; a[j]=a[j-1]; a[j-1]=t; } } } } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "bubble",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int tri(std::vector<int>& a){int n=a.size(), s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=a[(i+j+k)%n]; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T{ int tri(int n){int s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int cnt2=0; void gen2(std::vector<int>& a,int i){ if(i==(int)a.size()){cnt2++;return;} gen2(a,i+1); gen2(a,i+1);}",
    "language": "cpp",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class E{ int c=0; void g(int[] a,int i){ if(i==a.length){c++;return;} g(a,i+1); g(a,i+1);} }",
    "language": "java",
    "time_complexity": "O(2\u207f)",
    "space_complexity": "O(n)",
    "algorithm_type": "backtracking",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm{ void f(List<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, t.getOrDefault(x,0)+1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "import java.util.*; class Tm2{ void f(Set<Integer> a){ TreeMap<Integer,Integer> t=new TreeMap<>(); for(Integer x: a){ t.put(x, 1); } } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(n)",
    "algorithm_type": "balanced_tree",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void s2(std::vector<int>& a){ std::stable_sort(a.begin(), a.end()); }",
    "language": "cpp",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class S{ void s2(int[] a){ java.util.Arrays.sort(a); } }",
    "language": "java",
    "time_complexity": "O(n log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "sort",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm2(std::vector<int>& a){ do { /* visit */ } while(std::next_permutation(a.begin(), a.end())); }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(1)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P{ void p2(int[] a,int l){ if(l==a.length)return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; p2(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int dp3(int n){ std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=1e9; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+i*k*j); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D{ int mco(int[] p){ int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int triple2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s+=i+j+k; } } } return s; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class T2{ int tri2(int n){ int s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ for(int k=0;k<j;k++){ s++; } } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm3(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();i++){ int t=a[l]; a[l]=a[i]; a[i]=t; perm3(a,l+1); a[i]=a[l]; a[l]=t; } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P3{ void p3(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p3(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int mco2(std::vector<int>& p){int n=p.size(); std::vector<std::vector<int>> m(n, std::vector<int>(n,0)); for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=INT_MAX; for(int k=i;k<j;k++){ m[i][j]=std::min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; }",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class D2{ int mco2(int[] p){int n=p.length; int[][] m=new int[n][n]; for(int L=2;L<n;L++){ for(int i=1;i<n-L+1;i++){ int j=i+L-1; m[i][j]=Integer.MAX_VALUE; for(int k=i;k<j;k++){ m[i][j]=Math.min(m[i][j], m[i][k]+m[k+1][j]+p[i-1]*p[k]*p[j]); } } } return m[1][n-1]; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(n\u00b2)",
    "algorithm_type": "dp",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "void perm4(std::vector<int>& a,int l){ if(l==(int)a.size()) return; for(int i=l;i<(int)a.size();++i){ std::swap(a[l],a[i]); perm4(a,l+1); std::swap(a[l],a[i]); } }",
    "language": "cpp",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class P4{ void p4(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l]; a[l]=a[i]; a[i]=t; p4(a,l+1); t=a[l]; a[l]=a[i]; a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int lb(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B3{ int lb(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=l+(r-l)/2; if(a[m]<x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int scan(std::vector<int>& a,int x){int i=0; while(i<(int)a.size()){ if(a[i]==x) return i; i++; } return -1;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN1{ int scan(int[] a,int x){int i=0; while(i<a.length){ if(a[i]==x) return i; i++; } return -1; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "linear_scan",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int twop(std::vector<int>& a){int i=0,j=(int)a.size()-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt;}",
    "language": "cpp",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN2{ int twop(int[] a){int i=0,j=a.length-1, cnt=0; while(i<j){ if(a[i]+a[j]>0) j--; else i++; cnt++; } return cnt; } }",
    "language": "java",
    "time_complexity": "O(n)",
    "space_complexity": "O(1)",
    "algorithm_type": "two_pointer",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long pairs(std::vector<int>& a){ long c=0; int n=a.size(); for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN3{ long pairs(int[] a){ long c=0; int n=a.length; for(int i=0;i<n;i++){ for(int j=i+1;j<n;j++){ if(a[i]<a[j]) c++; } } return c; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s+=i+j+k; return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN4{ long tri3(int n){ long s=0; for(int i=0;i<n;i++) for(int j=0;j<n;j++) for(int k=0;k<n;k++) s++; return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b3)",
    "space_complexity": "O(1)",
    "algorithm_type": "triple_loop",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long factLike(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s;}",
    "language": "cpp",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class HN5{ long f(int n){ long s=0; for(int i=0;i<n;i++){ for(int j=0;j<=i;j++){ s+=i*j; } } return s; } }",
    "language": "java",
    "time_complexity": "O(n\u00b2)",
    "space_complexity": "O(1)",
    "algorithm_type": "nested_loops",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int ub(std::vector<int>& a,int x){int l=0,r=a.size(); while(l<r){ int m=(l+r)/2; if(a[m]<=x) l=m+1; else r=m; } return l; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int idx(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1; while(l<=r){ int m=(l+r)>>1; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1; } return -1; }",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B4{ int ub(int[] a,int x){int l=0,r=a.length; while(l<r){ int m=(l+r)>>>1; if(a[m]<=x) l=m+1; else r=m; } return l; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class B5{ int idx(int[] a,int x){int l=0,r=a.length-1; while(l<=r){ int m=(l+r)>>>1; if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1; } return -1; } }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ1{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ swap(a,l,i); p(a,l+1); swap(a,l,i);} } void swap(int[] a,int i,int j){ int t=a[i]; a[i]=a[j]; a[j]=t; } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ2{ void p(int[] a){ perm(a,0);} void perm(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ int t=a[l];a[l]=a[i];a[i]=t; perm(a,l+1); t=a[l];a[l]=a[i];a[i]=t; } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ3{ void p(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ if(i!=l){ int t=a[l];a[l]=a[i];a[i]=t; } p(a,l+1); if(i!=l){ int t=a[l];a[l]=a[i];a[i]=t; } } } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "int bs_min(std::vector<int>& a,int x){int l=0,r=(int)a.size()-1;while(l<=r){int m=(l+r)/2; if(a[m]==x)return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class Bmin{ int bs_min(int[] a,int x){int l=0,r=a.length-1;while(l<=r){int m=(l+r)>>>1; if(a[m]==x)return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;} }",
    "language": "java",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "long bs_long(std::vector<long>& a,long x){long l=0,r=(long)a.size()-1; while(l<=r){ long m=l+((r-l)>>1); if(a[m]==x) return m; if(a[m]<x) l=m+1; else r=m-1;} return -1;}",
    "language": "cpp",
    "time_complexity": "O(log n)",
    "space_complexity": "O(1)",
    "algorithm_type": "binary_search",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ4{ void solve(int[] a){ perm(a,0);} void perm(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ swap(a,l,i); perm(a,l+1); swap(a,l,i);} } void swap(int[] a,int i,int j){ int t=a[i]; a[i]=a[j]; a[j]=t; } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  },
  {
    "code": "class PJ5{ void perm(int[] a,int l){ if(l==a.length) return; for(int i=l;i<a.length;i++){ if(i!=l) swap(a,l,i); perm(a,l+1); if(i!=l) swap(a,l,i);} } void swap(int[] a,int i,int j){ int t=a[i]; a[i]=a[j]; a[j]=t; } }",
    "language": "java",
    "time_complexity": "O(n!)",
    "space_complexity": "O(n)",
    "algorithm_type": "permutations",
    "patterns": [],
    "confidence": 0.95,
    "source": "canonical"
  }
]